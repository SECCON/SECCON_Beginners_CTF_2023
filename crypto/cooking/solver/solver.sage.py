

# This file was *autogenerated* from the file solver.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_1024 = Integer(1024); _sage_const_32 = Integer(32); _sage_const_0 = Integer(0); _sage_const_30 = Integer(30)
from Crypto.Util.number import *
from pwn import *
import sys

if len(sys.argv) == _sage_const_3 :
    io = remote(sys.argv[_sage_const_1 ], int(sys.argv[_sage_const_2 ]))

p = _sage_const_2 **_sage_const_1024  - _sage_const_2 **_sage_const_32 
while True:
    p = next_prime(p)
    PR = PolynomialRing(GF(p), names=('x',)); (x,) = PR._first_ngens(1)
    f = (x + _sage_const_1 )**_sage_const_3  - x**_sage_const_3 
    gs = f.roots()
    gs = list(map(lambda x: x[_sage_const_0 ], gs))
    if len(gs) != _sage_const_2 :
        continue
    break
print("p", p)

io.sendline(str(p).encode())
io.recvuntil(b'This is meat: ')
m3 = int(io.recvline())
print(m3)

print(gs[_sage_const_0 ])
rs = []
for i in range(_sage_const_2 ):
    io.sendline(str(gs[i]).encode())
    io.recvuntil(b'Enjoy!')
    g0 = int(io.recvline())
    io.sendline(str(gs[i] + _sage_const_1 ).encode())
    io.recvuntil(b'Enjoy!')
    g1 = int(io.recvline())
    rs.append((g0, g1))
print(rs)

PR = PolynomialRing(GF(p), names=('x',)); (x,) = PR._first_ngens(1)
f1 = (rs[_sage_const_0 ][_sage_const_1 ] - (gs[_sage_const_0 ]+_sage_const_1 )*x**_sage_const_3 ) - (rs[_sage_const_0 ][_sage_const_0 ] - gs[_sage_const_0 ]*x**_sage_const_3 )*(x*gs[_sage_const_0 ]**_sage_const_3 )**_sage_const_3 
f2 = (rs[_sage_const_1 ][_sage_const_1 ] - (gs[_sage_const_1 ]+_sage_const_1 )*x**_sage_const_3 ) - (rs[_sage_const_1 ][_sage_const_0 ] - gs[_sage_const_1 ]*x**_sage_const_3 )*(x*gs[_sage_const_1 ]**_sage_const_3 )**_sage_const_3 
f1 = f1.monic()
f2 = f2.monic()
f = gcd(f1, f2)
c = - f[_sage_const_0 ]
print(f)

def franklinReiter(n, e, r, c1, c2):
    R = PolynomialRing(Zmod(n), names=('x',)); (x,) = R._first_ngens(1)
    f1 = x**e - c1
    f2 = (x + r)**e - c2
    return - polygcd(f1, f2).coefficients()[_sage_const_0 ]

def polygcd(a, b):
    if(b == _sage_const_0 ):
        return a.monic()
    else:
        return polygcd(b, a % b)

def CoppersmithShortPadAttack(e, n, C1, C2, eps=_sage_const_1 /_sage_const_30 ):
    P = PolynomialRing(ZZ, names=('x', 'y',)); (x, y,) = P._first_ngens(2)
    g1 = x**e - C1
    g2 = (x + y)**e - C2
    print(g1)
    res = g1.resultant(g2)

    Py = PolynomialRing(Zmod(n), names=('y',)); (y,) = Py._first_ngens(1)
    res = res.univariate_polynomial()
    res = res.change_ring(Py).subs(y=y)
    res = res.monic()
    kbits = n.nbits()//(_sage_const_2 *e*e)
    print(kbits)
    diff = res.small_roots(X=_sage_const_2 **kbits, epsilon=eps)
    print(diff)

    return franklinReiter(n, e, diff[_sage_const_0 ], C1, C2)

print(m3)
print(p)
print(c)
k = CoppersmithShortPadAttack(_sage_const_3 , p, m3, lift(c))
print(k)

